#[repr(u32)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum FltVolumeType {
    Unknown = 0,
    Raw,
    Ntfs,
    Fat,
    Cdfs,
    Udfs,
    Lanman,
    WebDav,
    RdpDr,
    Nfs,
    MsNetware,
    Netware,
    BsUdf,
    Mup,
    Rsfx,
    RoxioUdf1,
    RoxioUdf2,
    RoxioUdf3,
    Tacit,
    FsRec,
    Incd,
    IncdFat,
    Exfat,
    Psfs,
    Gpfs,
    Npfs,
    Msfs,
    Csvfs,
    Refs,
    OpenAfs,
    Cimfs,
}

impl TryFrom<u32> for FltVolumeType {
    type Error = &'static str;

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(FltVolumeType::Unknown),
            1 => Ok(FltVolumeType::Raw),
            2 => Ok(FltVolumeType::Ntfs),
            3 => Ok(FltVolumeType::Fat),
            4 => Ok(FltVolumeType::Cdfs),
            5 => Ok(FltVolumeType::Udfs),
            6 => Ok(FltVolumeType::Lanman),
            7 => Ok(FltVolumeType::WebDav),
            8 => Ok(FltVolumeType::RdpDr),
            9 => Ok(FltVolumeType::Nfs),
            10 => Ok(FltVolumeType::MsNetware),
            11 => Ok(FltVolumeType::Netware),
            12 => Ok(FltVolumeType::BsUdf),
            13 => Ok(FltVolumeType::Mup),
            14 => Ok(FltVolumeType::Rsfx),
            15 => Ok(FltVolumeType::RoxioUdf1),
            16 => Ok(FltVolumeType::RoxioUdf2),
            17 => Ok(FltVolumeType::RoxioUdf3),
            18 => Ok(FltVolumeType::Tacit),
            19 => Ok(FltVolumeType::FsRec),
            20 => Ok(FltVolumeType::Incd),
            21 => Ok(FltVolumeType::IncdFat),
            22 => Ok(FltVolumeType::Exfat),
            23 => Ok(FltVolumeType::Psfs),
            24 => Ok(FltVolumeType::Gpfs),
            25 => Ok(FltVolumeType::Npfs),
            26 => Ok(FltVolumeType::Msfs),
            27 => Ok(FltVolumeType::Csvfs),
            28 => Ok(FltVolumeType::Refs),
            29 => Ok(FltVolumeType::OpenAfs),
            30 => Ok(FltVolumeType::Cimfs),
            _ => Err("Unknown FLT filesystem type"),
        }
    }
}

impl TryFrom<i32> for FltVolumeType {
    type Error = &'static str;

    fn try_from(value: i32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(FltVolumeType::Unknown),
            1 => Ok(FltVolumeType::Raw),
            2 => Ok(FltVolumeType::Ntfs),
            3 => Ok(FltVolumeType::Fat),
            4 => Ok(FltVolumeType::Cdfs),
            5 => Ok(FltVolumeType::Udfs),
            6 => Ok(FltVolumeType::Lanman),
            7 => Ok(FltVolumeType::WebDav),
            8 => Ok(FltVolumeType::RdpDr),
            9 => Ok(FltVolumeType::Nfs),
            10 => Ok(FltVolumeType::MsNetware),
            11 => Ok(FltVolumeType::Netware),
            12 => Ok(FltVolumeType::BsUdf),
            13 => Ok(FltVolumeType::Mup),
            14 => Ok(FltVolumeType::Rsfx),
            15 => Ok(FltVolumeType::RoxioUdf1),
            16 => Ok(FltVolumeType::RoxioUdf2),
            17 => Ok(FltVolumeType::RoxioUdf3),
            18 => Ok(FltVolumeType::Tacit),
            19 => Ok(FltVolumeType::FsRec),
            20 => Ok(FltVolumeType::Incd),
            21 => Ok(FltVolumeType::IncdFat),
            22 => Ok(FltVolumeType::Exfat),
            23 => Ok(FltVolumeType::Psfs),
            24 => Ok(FltVolumeType::Gpfs),
            25 => Ok(FltVolumeType::Npfs),
            26 => Ok(FltVolumeType::Msfs),
            27 => Ok(FltVolumeType::Csvfs),
            28 => Ok(FltVolumeType::Refs),
            29 => Ok(FltVolumeType::OpenAfs),
            30 => Ok(FltVolumeType::Cimfs),
            _ => Err("Unknown FLT filesystem type"),
        }
    }
}
